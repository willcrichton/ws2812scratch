{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["window","colorString","DEBUG","NUM_PIXELS","ROTARY","BUTTON","_last_button","rpi","KillProg","Blockly","Blocks","init","this","jsonInit","message0","args1","type","name","message1","style","previousStatement","JavaScript","block","statementToCode","args0","check","output","valueToCode","ORDER_COMMA","ORDER_NONE","Block","arg_str","config","map","arg","expr_str","join","code","cls","codegen","CallbackBlock","fn","callbacks","push","LightInit","LightSetPixel","pixel","color","send","nextStatement","LightSetAllPixels","LightGetNumberPixels","LightGetDial","LightGetButton","console","log","sleep","ms","Promise","resolve","setTimeout","Sleep","time","LightOnButtonPress","LightOnDialChange","CLASSES","forEach","register","Coder","props","state","running","blockly","React","createRef","toolbox","save_link","load_input","xml","Xml","workspaceToDom","workspace","domToText","xml_text","clear","textToDom","domToWorkspace","inject","current","addChangeListener","event","localStorage","setItem","codeToString","getItem","codeFromString","that","addEventListener","reader","FileReader","onload","data_bytes","Uint8Array","result","data_str","String","fromCharCode","apply","readAsArrayBuffer","files","workspaceToCode","setState","eval","e","alert","stack","click","file","Blob","url","URL","createObjectURL","a","href","download","revokeObjectURL","className","onClick","stop","run","save","display","ref","load","custom","Component","App","loaded","error","WebSocket","onclose","message","JSON","parse","data","parseInt","value","cb","module","exports","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be0f5c8c.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Blockly from 'blockly';\nimport JavaScript from 'blockly/javascript';\nimport colorString from 'color-string';\n\nwindow.colorString = colorString;\n\nconst DEBUG = true;\n\nlet NUM_PIXELS;\nlet ROTARY = 0;\nlet BUTTON = false;\nlet _last_button = false;\n\nlet rpi;\n\nwindow.KillProg = false;\n\nBlockly.Blocks['controls_forever'] = {init: function() {\n  this.jsonInit({\n    message0: 'forever',\n    args1: [{type: 'input_statement', name: 'body'}],\n    message1: 'do %1',\n    style: \"loop_blocks\",\n    previousStatement: true\n  });\n}};\n\nJavaScript['controls_forever'] = function(block) {\n  return `function _forever() {\n    ${JavaScript.statementToCode(block, 'body')}\n    if (!window.KillProg) {\n      setTimeout(_forever, 5);\n    }\n  }\n  _forever()`;\n};\n\nBlockly.Blocks['number_to_index'] = {init: function() {\n  this.jsonInit({\n    message0: 'convert number %1',\n    args0: [{type: 'input_value', name: 'number', check: 'Number'}],\n    message1: 'to index of list length %1',\n    args1: [{type: 'input_value', name: 'length', check: 'Number'}],\n    output: 'Number'\n  });\n}};\n\nJavaScript['number_to_index'] = function(block) {\n  return [`(${JavaScript.valueToCode(block, 'number', JavaScript.ORDER_COMMA)}-1)%${JavaScript.valueToCode(block, 'length', JavaScript.ORDER_COMMA)}+1`,\n          JavaScript.ORDER_NONE];\n};\n\nclass Block {\n  static codegen(block) {\n    const arg_str = (this.config.args0 || [])\n      .map((arg) => {\n        let expr_str = JavaScript.valueToCode(\n          block, arg.name, JavaScript.ORDER_COMMA);\n        if (arg.check === 'Colour') {\n          expr_str = `colorString.get.rgb(${expr_str})`;\n        }\n        return expr_str;\n      })\n      .join(',');\n    const code = `await ${this.name}.execute(${arg_str})`;\n    if (this.config.output) {\n      return [code, JavaScript.ORDER_NONE];\n    } else {\n      return `${code};\\n`;\n    }\n  };\n\n  static register() {\n    const cls = this.name;\n    const config = this.config;\n    Blockly.Blocks[cls] = {init: function() { this.jsonInit(config); }};\n    JavaScript[cls] = (block) => { return this.codegen(block); }\n    window.cls = this;\n  }\n}\n\n// TODO: when to trigger callbacks\nclass CallbackBlock extends Block {\n  static codegen(block) {\n    return `\n${this.name}.register_callback(async function() {\n  ${JavaScript.statementToCode(block, 'body')}\n});\n    `;\n  }\n\n  static register_callback(fn) {\n    this.callbacks.push(fn);\n  }\n}\n\nclass LightInit extends Block {\n  static config = {\n    message0: 'initialize lights %1',\n    args0: [{type: 'input_statement', name: 'body'}]\n  }\n\n  static codegen(block) {\n    return `(async function() { ${JavaScript.statementToCode(block, 'body')} })()`;\n  }\n}\n\nclass LightSetPixel extends Block {\n  static config = {\n    args0: [\n      {type: 'input_value',  name: 'pixel', check: 'Number'},\n      {type: 'input_value',  name: 'color', check: 'Colour'}\n    ],\n    message0: 'set pixel %1 to color %2',\n    nextStatement: true,\n    previousStatement: true\n  }\n\n  static async execute(pixel, color) {\n    //console.log('SetPixel', pixel, color);\n    rpi.send(`setpixel ${pixel-1} ${color[0]} ${color[1]} ${color[2]}`);\n  }\n}\n\nclass LightSetAllPixels extends Block {\n  static config = {\n    args0: [\n      {type: 'input_value', name: 'color', check: 'Colour'}\n    ],\n    message0: 'set all pixels to color %1',\n    nextStatement: true,\n    previousStatement: true\n  }\n\n  static async execute(color) {\n    //console.log('SetAllPixels', color);\n    rpi.send(`setpixels ${color[0]} ${color[1]} ${color[2]}`);\n  }\n}\n\nclass LightGetNumberPixels extends Block {\n  static config = {\n    message0: 'number of pixels',\n    output: 'Number'\n  }\n\n  static async execute() {\n    //console.log('GetNumberPixels');\n    return NUM_PIXELS;\n  }\n}\n\nclass LightGetDial extends Block {\n  static config = {\n    message0: 'dial value',\n    output: 'Number'\n  }\n\n  static async execute() {\n    return ROTARY;\n  }\n}\n\nclass LightGetButton extends Block {\n  static config = {\n    message0: 'is button pressed?',\n    output: 'Boolean'\n  }\n\n  static async execute() {\n    console.log('GetButton');\n    return BUTTON;\n  }\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass Sleep extends Block {\n  static config = {\n    previousStatement: true,\n    nextStatement: true,\n    message0: 'sleep for %1 seconds',\n    args0: [{type: 'input_value', name: 'time', check: 'Number'}]\n  }\n\n\n  static async execute(time) {\n    await sleep(time * 1000);\n  }\n}\n\n\nclass LightOnButtonPress extends CallbackBlock {\n  static callbacks = []\n\n  static config = {\n    message0: 'When button is pressed',\n    args1: [{type: 'input_statement', name: 'body'}],\n    message1: '%1'\n  }\n}\n\n\nclass LightOnDialChange extends CallbackBlock {\n  static callbacks = []\n\n  static config = {\n    message0: 'When dial is turned',\n    args1: [{type: 'input_statement', name: 'body'}],\n    message1: '%1'\n  }\n}\n\nconst CLASSES = [LightInit, LightSetPixel, LightSetAllPixels, LightGetNumberPixels, LightGetDial, LightGetButton, LightOnButtonPress, LightOnDialChange, Sleep];\nCLASSES.forEach((cls) => cls.register());\n\nclass Coder extends React.Component {\n  state = {running: false}\n\n  constructor(props) {\n    super(props);\n    this.blockly = React.createRef();\n    this.toolbox = React.createRef();\n    this.save_link = React.createRef();\n    this.load_input = React.createRef();\n  }\n\n  codeToString() {\n    const xml = Blockly.Xml.workspaceToDom(this.workspace);\n    const xml_text = Blockly.Xml.domToText(xml);\n    return xml_text;\n  }\n\n  codeFromString(xml_text) {\n    this.workspace.clear();\n    const xml = Blockly.Xml.textToDom(xml_text);\n    Blockly.Xml.domToWorkspace(xml, this.workspace);\n  }\n\n  componentDidMount() {\n    this.workspace = Blockly.inject(this.blockly.current,\n                                    {toolbox: this.toolbox.current});\n    this.workspace.addChangeListener((event) => {\n      localStorage.setItem('LIGHT_BLOCK_PROG', this.codeToString());\n    });\n\n    const xml_text = localStorage.getItem('LIGHT_BLOCK_PROG');\n    if (xml_text) {\n      this.codeFromString(xml_text);\n    }\n\n    const that = this;\n    this.load_input.current.addEventListener('change', function() {\n      let reader = new FileReader();\n      reader.onload = function() {\n        const data_bytes = new Uint8Array(this.result);\n        const data_str = String.fromCharCode.apply(null, data_bytes);\n        that.codeFromString(data_str);\n      };\n\n      reader.readAsArrayBuffer(this.files[0]);\n    });\n  }\n\n  run() {\n    const code = JavaScript.workspaceToCode(this.workspace);\n    console.log(code);\n\n    window.KillProg = false;\n\n    this.setState({running: true});\n\n    try {\n      eval(code);\n    } catch (e) {\n      window.alert(`Failed with error:\\n${e.stack}`);\n    }\n\n\n    this.setState({running: false});\n  }\n\n  stop() {\n    window.KillProg = true;\n  }\n\n  load() {\n    this.load_input.current.click();\n  }\n\n  save() {\n    // https://stackoverflow.com/questions/13405129/javascript-create-and-save-file\n    let file = new Blob([this.codeToString()], {type: 'text/xml'});\n    let url = URL.createObjectURL(file);\n    let a = this.save_link.current;\n    a.href = url;\n    a.download = 'program.xml';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n\n  render() {\n    return <div className='coder'>\n      <div className='buttons'>\n        {!this.state.running\n          ? <button className='run' onClick={() => this.run()}>Run program</button>\n          : <button className='stop' onClick={() => this.stop()}>Stop program</button>}\n        <button onClick={() => this.save()}>Save program</button>\n        <a style={{display: 'none'}} ref={this.save_link} />\n        <button onClick={() => this.load()}>Load program</button>\n        <input style={{display: 'none'}} ref={this.load_input} type='file' />\n      </div>\n      <div className='blockly' ref={this.blockly} />\n      <xml ref={this.toolbox} style={{display: 'none'}}>\n        <category name=\"Control\">\n          <block type=\"controls_if\"></block>\n          <block type=\"controls_whileUntil\"></block>\n          <block type=\"controls_for\"></block>\n          <block type=\"controls_forEach\"></block>\n          <block type=\"controls_repeat_ext\"></block>\n          <block type=\"controls_forever\"></block>\n        </category>\n        <category name=\"Math\">\n          <block type=\"logic_compare\"></block>\n          <block type=\"math_number\"></block>\n          <block type=\"math_arithmetic\"></block>\n          <block type=\"math_modulo\"></block>\n          <block type=\"number_to_index\"></block>\n        </category>\n        <category name=\"Text\">\n          <block type=\"text\"></block>\n          <block type=\"text_print\"></block>\n        </category>\n        <category name=\"Light\">\n          {CLASSES.map((cls) => <block type={cls.name} />)}\n        </category>\n        <category name=\"Color\">\n          <block type=\"colour_picker\"></block>\n          <block type=\"colour_rgb\"></block>\n        </category>\n        <category name=\"Lists\">\n          <block type=\"lists_create_empty\"></block>\n          <block type=\"lists_create_with\"></block>\n          <block type=\"lists_length\"></block>\n          <block type=\"lists_getIndex\"></block>\n          <block type=\"lists_setIndex\"></block>\n        </category>\n        <category name=\"Variables\" custom=\"VARIABLE\"></category>\n        <category name=\"Functions\" custom=\"PROCEDURE\"></category>\n      </xml>\n    </div>;\n  }\n}\n\nclass App extends React.Component {\n  state = {loaded: false, error: false}\n\n  constructor(props) {\n    super(props);\n    rpi = new WebSocket('ws://raspberrypi.local:8000');\n\n    /*rpi.onerror = (event) => {\n      console.error(event);\n    };*/\n\n    rpi.onclose = (event) => {\n      this.setState({error: true});\n    };\n\n    rpi.addEventListener('open', () => {\n      console.log('Open');\n      this.setState({loaded: true});\n      rpi.send('init');\n    });\n\n    rpi.addEventListener('message', (event) => {\n      const message = JSON.parse(event.data);\n      if (DEBUG) {\n        console.log('Received message', message);\n      }\n      if (message.name === 'init') {\n        NUM_PIXELS = parseInt(message.value);\n      } else if (message.name === 'button1') {\n        BUTTON = message.value;\n        if (BUTTON && !_last_button) {\n          console.log(LightOnButtonPress.callbacks);\n          LightOnButtonPress.callbacks.map((cb) => cb());\n        }\n        _last_button = BUTTON;\n      } else if (message.name === 'rotary1') {\n        ROTARY = message.value;\n        LightOnDialChange.callbacks.map((cb) => cb());\n      }\n    });\n  }\n\n  render() {\n    return <div className='app'>\n      <h1>Light Maker</h1>\n      {this.state.error\n        ? <div>I wasn't able to connect to the Light Block. A few things to check:\n          <ul>\n            <li><strong>Power problems:</strong>\n              <ul><li>Make sure the Light Block is plugged in.</li>\n                <li>Open the top and make sure the Raspberry Pi has a red light turned on.</li>\n              </ul></li>\n            <li><strong>Network problems:</strong><br />\n              To see if you have a network problem, from the terminal, run:\n              <pre>ping raspberrypi.local</pre>\n              If you get the response:\n              <pre>ping: cannot resolve raspberrypi.local: Unknown host</pre>\n       then the Raspberry Pi isn't connected to the same network as your computer.\n           <ul>\n             <li>Make sure your computer is on the same Wifi as the one you set up on the Pi.</li>\n             <li>At this point, you will need to manually configure Wifi on the Raspberry Pi. Plug a monitor into the HDMI port and a mouse/keyboard into the USB ports. <a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/desktop.md\">Follow the directions here</a> to setup the Pi's Wifi.</li>\n           </ul></li>\n          </ul>\n        </div>\n        : (this.state.loaded\n          ? <Coder />\n          : <span>Waiting to connect to the Light Block...</span>)}\n    </div>;\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}